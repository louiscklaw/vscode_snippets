{
	/*
		// Place your snippets for Python here. Each snippet is defined under a snippet name and has a prefix, body and
		// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
		// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
		// same ids are connected.
		// Example:
		"Print to console": {
			"prefix": "log",
			"body": [
				"console.log('$1');",
				"$2"
			],
			"description": "Log output to console"
		}
	*/
	"test python": {
		"prefix": "findme",
		"body": ["logging.info('findme')"],
		"description": "helloworld"
	},
	"test python": {
		"prefix": "def_cust",
		"body": [
			"def ${1:name}(${3:parameters}):",
			"    \"\"\"${2:description}\"\"\"",
			"",
			"",
			"    pass"
		],
		"description": "helloworld"
	},
	"def_with_try": {
		"prefix": "def_with_try",
		"body": [
			"def ${1:functionName}(self):",
			"    try:",
			"",
			"        pass",
			"    except Exception as e:",
			"        print(e)",
			"        utils.logv2('error occur during ${1:functionName}', 'Fail')",
			"        raise e",
			"",
			"    pass",
			""
		],
		"description": "def with try loop, used in TL"
	},
	"init_python": {
		"prefix": "init_python",
		"body": [
			"#!/usr/bin/env python",
			"# coding:utf-8",
			"import os, sys",
			"import logging",
			"import traceback",
			"from pprint import pprint",
			"",
			"logging.basicConfig(level=logging.DEBUG,",
			"   format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',",
			"   datefmt='%a, %d %b %Y %H:%M:%S',",
			"   filename='debug.log',",
			"   filemode='a')",
			"",
			""
		],
		"description": "init_python"
	},
	"logging_debug": {
		"prefix": "logging_debug",
		"body": ["logging.debug('${1:??}')"],
		"description": "logging_debug"
	},
	"logging_error": {
		"prefix": "logging_error",
		"body": ["logging.error('${1:error occur at ${2:??}})"],
		"description": "logging_error"
	},
	"logging_error_value": {
		"prefix": "logging_error_value",
		"body": [
			"logging.error('${1:print_value}:%s' % ${1:??})"
		],
		"description": "logging_error_value"
	},
	
	"logging_info": {
		"prefix": "logging_info",
		"body": ["logging.info('${1:??}')"],
		"description": "logging_info"
	},
	"unittest_example": {
		"prefix": "unittest_example",
		"body": [
			"",
			"import unittest",
			"",
			"class TestStringMethods(unittest.TestCase):",
			"",
			"    def setUp(self):",
			"        self.assertEqual('foo'.upper(), 'FOO')",
			"",
			"",
			"    def tearDown(self):",
			"        self.assertEqual('foo'.upper(), 'FOO')",
			"",
			"",
			"    def test_upper(self):",
			"        self.assertEqual('foo'.upper(), 'FOO')",
			"",
			"    def test_isupper(self):",
			"        self.assertTrue('FOO'.isupper())",
			"        self.assertFalse('Foo'.isupper())",
			"",
			"    def test_split(self):",
			"        s = 'hello world'",
			"        self.assertEqual(s.split(), ['hello', 'world'])",
			"        # check that s.split fails when the separator is not a string",
			"        with self.assertRaises(TypeError):",
			"            s.split(2)",
			"",
			"if __name__ == '__main__':",
			"    unittest.main()",
			""
		],
		"description": "unittest_example"
	},
	"init_unittest_body": {
		"prefix": "init_unittest_body",
		"body": [
			"",
			"class TestStringMethods(unittest.TestCase):",
			"",
			"    def setUp(self):",
			"        self.assertEqual('foo'.upper(), 'FOO')",
			"",
			"",
			"    def tearDown(self):",
			"        self.assertEqual('foo'.upper(), 'FOO')",
			"",
			"",
			"    def test_upper(self):",
			"        self.assertEqual('foo'.upper(), 'FOO')",
			"",
			"    def test_isupper(self):",
			"        self.assertTrue('FOO'.isupper())",
			"        self.assertFalse('Foo'.isupper())",
			"",
			"    def test_split(self):",
			"        s = 'hello world'",
			"        self.assertEqual(s.split(), ['hello', 'world'])",
			"        # check that s.split fails when the separator is not a string",
			"        with self.assertRaises(TypeError):",
			"            s.split(2)",
			""
		],
		"description": "init_unittest_body"
	},
	"docstring_pep484": {
		"prefix": "docstring_pep484",
		"body": [
			"\"\"\"${1:Example function with PEP 484 type annotations.}",
			"",
			"Args:",
			"    ${2:Args1 : the 1st arguments}",
			"",
			"Returns:",
			"    ${3:Return1 : the 1st arguments}",
			"",
			"Exceptions:",
			"    ${4:Exception : Special Exception handling strategy}",
			"",
			"NOTES/IDEAS:${5: NOTES AND IDEAS}",
			"Assumptions:${6: ASSUMPTION at the moment on design}",
			"",
			"\"\"\"",
			""
		],
		"description": "docstring_pep484"
	},
	"TODO": {
		"prefix": "TODO",
		"body": ["# TODO: ${1:Temporary solution ${2:...} }"],
		"description": "TODO"
	},
	"NOTE": {
		"prefix": "NOTE",
		"body": ["# NOTE: ${1:I would like to ${2:...} }"],
		"description": "NOTE"
	},
	"FIXME": {
		"prefix": "FIXME",
		"body": ["# FIXME: ${1:FIXME please ${2:...}} "],
		"description": "FIXME"
	},
	"IDEA": {
		"prefix": "IDEA",
		"body": ["# IDEA: ${1:Is it possible to ${2:...} ??}"],
		"description": "idea"
	},
	"QUESTION?": {
		"prefix": "QUESTION?",
		"body": [
			"# QUESTION?: ${1:What is the opinion about ${2:...} ??}"
		],
		"description": "question"
	},
	"STORY?": {
		"prefix": "STORY?",
		"body": [
			"# STORY?: ${1:This is a story about ${2:...} ??}"
		],
		"description": "story"
	},
	
	"init_unittest": {
		"prefix": "init_unittest",
		"body": [
			"import unittest",
			"",
			"${1:# this is a test}",
			"",
			"if __name__ == '__main__':",
			"    unittest.main()",
			""
		],
		"description": "init_unittest"
	},
	"context_steps": {
		"prefix": "context_steps",
		"body": [
			" context.execute_steps(u'''",
			"Then ADB Reboot bootloader",
			"''')"
		],
		"description": "execute_steps by "
	},
	"doc_input_param": {
		"prefix": "doc_input_param",
		"body": [
			"${1:para_name}: ${2:para_description}"
		],
		"description": "insert parameter documentation in docstring"
	},
	"init_new_task": {
		"prefix": "init_new_task",
		"body": [
			"@task",
			"def helloworld(context):",
			"    \"\"\"TODO: fill here",
			"    \"\"\"",
			"    print('helloworld')",
			"    pass"
		],
		"description": "init a new inv task"
	},
	"troubleshoot_temp": {
		"prefix": "troubleshoot_temp",
		"body": [
			"# TODO: FOR TROUBLESHOOT, REMOVE ME",
			"# ",
			"print('findme')",
			"",
			"# TODO: FOR TROUBLESHOOT, REMOVE ME"
		],
		"description": "init a new inv task"
	},
	"step": {
		"prefix": "step:",
		"body": [
			"# STEP: ${1: i am a new step}",
			"print(\"STEP: ${1: i am a new step}\")",
			"",
			"${2:}"
		],
		"description": "descriptions"
	},
	"step_color": {
		"prefix": "step_color:",
		"body": [
			"# STEP: ${1: i am a new step}",
			"print(fabric.colors.${2:green}(\"STEP: ${1: i am a new step}\"))",
			""
		],
		"description": "descriptions"
	},
	"Screen": {
		"prefix": "screen:",
		"body": [
			"# Screen: '${1: screenname}'",
			"print(\"Screen: '${1: screenname}'\")",
			"",
			"${2:}"
		],
		"description": "descriptions"
	},
	"Screen": {
		"prefix": "wait:",
		"body": [
			"# wait: '${1: waitname}'",
			"print(\"wait: '${1: waitname}'\")",
			"",
			"${2:}"
		],
		"description": "descriptions"
	},
	"env_python": {
		"prefix": "env_python",
		"body": ["#!/usr/bin/env python"],
		"description": "#!/usr/bin/env python"
	},

	"normalize_string_to_array": {
		"prefix": "normalize_string_to_array",
		"body": [
			"def normalize_string_to_list(object):",
			"    output = object",
			"    if type(output) == type([]):",
			"        pass",
			"    else:",
			"        output=[str(object)]",
			"    return output"
		],
		"description": "normalize string to an array, do nothing if array already"
	},
	"init_all_exception": {
		"prefix": "init_all_exception",
		"body":
			//
			[
				"# TODO: remove me",
				"except Exception as e:",
				"    raise",
				"# TODO: remove me"
			],
		"description": "description"
	},
	"todo_remove_me": {
		"prefix": "todo_remove_me",
		"body":
			//
			[
				"# TODO: remove me"
			],
		"description": "description"
	},
	"join_path": {
		"prefix": "join_path",
		"body": [
			"os.path.sep.join([${1:path_to_join},${2:__file__}])"
		],
		"description": "description"
	},
	"init_get_or_create_directory": {
		"prefix": "init_get_or_create_directory",
		"body":
			//
			[
				"if not os.path.exists(directory):",
				"    os.makedirs(directory)",
				""
			],
		"description": "description"
	},
	"check_dir_exists": {
		"prefix": "check_dir_exists",
		"body":
			//
			[
				"os.path.isdir('${1:directory-want-to-check}')"
			],
		"description": "description"
	},
	"findme_debug": {
		"prefix": "findme_debug",
		"body":
			//
			[
				"# TODO: remove me",
				"print('findme ${1:??}')",
				"# TODO: remove me"
			],
		"description": "description"
	},
	"utils_logv2_value": {
		"prefix": "utils_logv2_value",
		"body":
			//
			[
				"utils.logv2('${1:value_text}:%s'% ${1:value},'')"
			],
		"description": "description"
	},
	"utils_logv2": {
		"prefix": "utils_logv2",
		"body":
			//
			[
				"utils.logv2('error occur during ${1:value_text}','${2:value}')"
			],
		"description": "description"
	}



}